[debug] [2025-10-04T01:33:43.963Z] ----------------------------------------------------------------------
[debug] [2025-10-04T01:33:43.966Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\PC\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js emulators:start
[debug] [2025-10-04T01:33:43.966Z] CLI Version:   14.17.0
[debug] [2025-10-04T01:33:43.966Z] Platform:      win32
[debug] [2025-10-04T01:33:43.966Z] Node Version:  v24.6.0
[debug] [2025-10-04T01:33:43.966Z] Time:          Fri Oct 03 2025 20:33:43 GMT-0500 (Central Daylight Time)
[debug] [2025-10-04T01:33:43.966Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-04T01:33:44.114Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] Failed to authenticate, have you run firebase login?
[warn] !  emulators: You are not currently authenticated so some features may not work correctly. Please run firebase login to authenticate the CLI. 
[debug] [2025-10-04T01:33:44.223Z] java version "21.0.8" 2025-07-15 LTS

[debug] [2025-10-04T01:33:44.223Z] Java(TM) SE Runtime Environment (build 21.0.8+12-LTS-250)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.8+12-LTS-250, mixed mode, sharing)

[debug] [2025-10-04T01:33:44.242Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: auth, firestore, storage {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: auth, firestore, storage"}}
[info] i  emulators: Detected demo project ID "demo-no-project", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-no-project\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[debug] [2025-10-04T01:33:44.253Z] [logging] Logging Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-04T01:33:44.253Z] [auth] Authentication Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-04T01:33:44.253Z] [firestore] Firestore Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-04T01:33:44.253Z] [firestore.websocket] websocket server for firestore only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-04T01:33:44.253Z] [storage] Storage Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-04T01:33:44.254Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400},{"address":"::1","family":"IPv6","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000},{"address":"::1","family":"IPv6","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"auth":[{"address":"127.0.0.1","family":"IPv4","port":9099}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8081}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}],"storage":[{"address":"127.0.0.1","family":"IPv4","port":9199}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-10-04T01:33:44.256Z] Emulator locator file path: C:\Users\PC\AppData\Local\Temp\hub-demo-no-project.json
[debug] [2025-10-04T01:33:44.256Z] [hub] writing locator at C:\Users\PC\AppData\Local\Temp\hub-demo-no-project.json
[debug] [2025-10-04T01:33:44.262Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-10-04T01:33:44.262Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-10-04T01:33:44.262Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","C:\\Users\\PC\\.cache\\firebase\\emulators\\cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8081,"--websocket_port",9150,"--project_id","demo-no-project","--rules","C:\\Repositories\\Apollo-1\\firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8081} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"C:\\\\Users\\\\PC\\\\.cache\\\\firebase\\\\emulators\\\\cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8081,\"--websocket_port\",9150,\"--project_id\",\"demo-no-project\",\"--rules\",\"C:\\\\Repositories\\\\Apollo-1\\\\firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8081}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[info] +  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-10-04T01:33:50.222Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"storage"},"message":"Ignoring unsupported arg: port"}}
[debug] [2025-10-04T01:33:50.964Z] Temp file directory for storage emulator: C:\Users\PC\AppData\Local\Temp/firebase/storage/blobs {"metadata":{"emulator":{"name":"storage"},"message":"Temp file directory for storage emulator: C:\\Users\\PC\\AppData\\Local\\Temp/firebase/storage/blobs"}}
[debug] [2025-10-04T01:33:50.975Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: . If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌────────────────┬────────────────┬─────────────────────────────────┐
│ Emulator       │ Host:Port      │ View in Emulator UI             │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Authentication │ 127.0.0.1:9099 │ http://127.0.0.1:4000/auth      │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Firestore      │ 127.0.0.1:8081 │ http://127.0.0.1:4000/firestore │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Storage        │ 127.0.0.1:9199 │ http://127.0.0.1:4000/storage   │
└────────────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:33:51.704Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:33:51.704Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         ((get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID != null && \n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid) ||\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID != null && \n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid) ||\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          ((get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID != null && \n            get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid) ||\n           (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID != null && \n            get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid))) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:33:51.908Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:33:51.908Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:35:35.706Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:35:35.706Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          ((get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID != null && \n            get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid) ||\n           (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID != null && \n            get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid))) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:35:35.756Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:35:35.756Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:35:44.848Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:35:44.848Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:35:44.879Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:35:44.880Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:35:52.995Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:35:52.995Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:35:53.025Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:35:53.026Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:36:51.743Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:36:51.743Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n           get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true)));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:36:51.769Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:36:51.769Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:36:59.457Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:36:59.457Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n           get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true)));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:36:59.481Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:36:59.481Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:37:15.900Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:37:15.900Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n           get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true)));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:37:15.926Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:37:15.926Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:37:24.058Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:37:24.058Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow create for committee chairs and vice chairs\n      allow create: if request.auth != null && \n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n         (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n          get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n          (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n           get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true)));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:37:24.082Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:37:24.082Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:37:44.036Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:37:44.037Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow create for authenticated users (temporary - for testing)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:37:44.060Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:37:44.060Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:37:53.436Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:37:53.436Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow create for authenticated users (temporary - for testing)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:37:53.458Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:37:53.458Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:38:08.059Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:38:08.059Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow create for committee chairs, vice chairs, or admins\n      allow create: if request.auth != null && \n        (resource.data.UID == request.auth.uid) &&\n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID))) &&\n        (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n         get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:38:08.084Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:38:08.084Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-04T01:38:15.076Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-04T01:38:15.076Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // USER collection - simplified rules for debugging\n    match /user/{userId} {\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\n      allow read, write: if request.auth != null;\n    }\n    \n    // COMMITTEE collection\n    match /committee/{committeeId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with manage_committees permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\n    }\n    \n    // SERVES collection (committee membership)\n    match /serves/{serveId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to join committees)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with manage_committees permission OR the user themselves\n      allow update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true ||\n         resource.data.UID == request.auth.uid);\n    }\n    \n    // FUNDING collection\n    match /funding/{fundingId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with appropriate permissions\n      allow create, update, delete: if request.auth != null && \n        (get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true ||\n         get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true);\n    }\n    \n    // VOLUNTEER collection\n    match /volunteer/{volunteerId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_volunteering permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\n    }\n    \n    // VOLUNTEERED collection\n    match /volunteered/{volunteeredId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to volunteer)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_volunteering permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\n    }\n    \n    // ATTENDANCE collection\n    match /attendance/{attendanceId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create/update/delete for users with create_attendance permission\n      allow create, update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\n    }\n    \n    // ATTENDED collection\n    match /attended/{attendedId} {\n      // Allow read for authenticated users\n      allow read: if request.auth != null;\n      \n      // Allow create for authenticated users (to record attendance)\n      allow create: if request.auth != null;\n      \n      // Allow update/delete for users with approve_attendance permission\n      allow update, delete: if request.auth != null && \n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\n    }\n    \n    // REPORT collection\n    match /report/{reportId} {\n      // Allow read for authenticated users (public reports) or committee members (private reports)\n      allow read: if request.auth != null && \n        (resource.data.REP_IS_PUBLIC == true || \n         exists(/databases/$(database)/documents/serves/$(request.auth.uid + '_' + resource.data.COMM_ID)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow create for committee chairs, vice chairs, or admins\n      allow create: if request.auth != null && \n        (resource.data.UID == request.auth.uid) &&\n        (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID))) &&\n        (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n         get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n      \n      // Allow update/delete for report authors, chairs, vice chairs, or users with manage_committees permission\n      allow update, delete: if request.auth != null && \n        (resource.data.UID == request.auth.uid ||\n         (exists(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)) &&\n          (get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.CHAIR_ID == request.auth.uid ||\n           get(/databases/$(database)/documents/committee/$(resource.data.COMM_ID)).data.VICE_CHAIR_ID == request.auth.uid)) ||\n         (exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\n          get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true));\n    }\n  }\n}\n"}]}}
[debug] [2025-10-04T01:38:15.101Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-04T01:38:15.101Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
