[debug] [2025-10-02T11:20:48.776Z] ----------------------------------------------------------------------
[debug] [2025-10-02T11:20:48.778Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\PC\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js emulators:start
[debug] [2025-10-02T11:20:48.778Z] CLI Version:   14.17.0
[debug] [2025-10-02T11:20:48.778Z] Platform:      win32
[debug] [2025-10-02T11:20:48.778Z] Node Version:  v24.6.0
[debug] [2025-10-02T11:20:48.779Z] Time:          Thu Oct 02 2025 06:20:48 GMT-0500 (Central Daylight Time)
[debug] [2025-10-02T11:20:48.779Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-02T11:20:48.938Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] Failed to authenticate, have you run firebase login?
[warn] !  emulators: You are not currently authenticated so some features may not work correctly. Please run firebase login to authenticate the CLI. 
[debug] [2025-10-02T11:20:49.043Z] java version "21.0.8" 2025-07-15 LTS

[debug] [2025-10-02T11:20:49.043Z] Java(TM) SE Runtime Environment (build 21.0.8+12-LTS-250)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.8+12-LTS-250, mixed mode, sharing)

[debug] [2025-10-02T11:20:49.069Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: auth, firestore, storage {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: auth, firestore, storage"}}
[info] i  emulators: Detected demo project ID "demo-no-project", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-no-project\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[debug] [2025-10-02T11:20:49.082Z] [logging] Logging Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-02T11:20:49.082Z] [auth] Authentication Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-02T11:20:49.082Z] [firestore] Firestore Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-02T11:20:49.082Z] [storage] Storage Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-02T11:20:49.083Z] [firestore.websocket] websocket server for firestore only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2025-10-02T11:20:49.083Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400},{"address":"::1","family":"IPv6","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000},{"address":"::1","family":"IPv6","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"auth":[{"address":"127.0.0.1","family":"IPv4","port":9099}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8081}],"storage":[{"address":"127.0.0.1","family":"IPv4","port":9199}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9151}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-10-02T11:20:49.086Z] Emulator locator file path: C:\Users\PC\AppData\Local\Temp\hub-demo-no-project.json
[warn] !  emulators: It seems that you are running multiple instances of the emulator suite for project demo-no-project. This may result in unexpected behavior. 
[debug] [2025-10-02T11:20:49.086Z] [hub] writing locator at C:\Users\PC\AppData\Local\Temp\hub-demo-no-project.json
[debug] [2025-10-02T11:20:49.092Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-10-02T11:20:49.092Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-10-02T11:20:49.092Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","C:\\Users\\PC\\.cache\\firebase\\emulators\\cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8081,"--websocket_port",9151,"--project_id","demo-no-project","--rules","C:\\Repositories\\Apollo-1\\firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8081} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"C:\\\\Users\\\\PC\\\\.cache\\\\firebase\\\\emulators\\\\cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8081,\"--websocket_port\",9151,\"--project_id\",\"demo-no-project\",\"--rules\",\"C:\\\\Repositories\\\\Apollo-1\\\\firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8081}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[info] +  firestore: Firestore Emulator UI websocket is running on 9151. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9151."}}
[debug] [2025-10-02T11:20:54.698Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"storage"},"message":"Ignoring unsupported arg: port"}}
[debug] [2025-10-02T11:20:55.468Z] Temp file directory for storage emulator: C:\Users\PC\AppData\Local\Temp/firebase/storage/blobs {"metadata":{"emulator":{"name":"storage"},"message":"Temp file directory for storage emulator: C:\\Users\\PC\\AppData\\Local\\Temp/firebase/storage/blobs"}}
[debug] [2025-10-02T11:20:55.478Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: . If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌────────────────┬────────────────┬─────────────────────────────────┐
│ Emulator       │ Host:Port      │ View in Emulator UI             │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Authentication │ 127.0.0.1:9099 │ http://127.0.0.1:4000/auth      │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Firestore      │ 127.0.0.1:8081 │ http://127.0.0.1:4000/firestore │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Storage        │ 127.0.0.1:9199 │ http://127.0.0.1:4000/storage   │
└────────────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9151

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:27:14.355Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:27:14.355Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      allow read, write: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles\r\n      allow read, write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:27:14.429Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:27:14.429Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:27:20.759Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:27:20.759Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      allow read, write: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles\r\n      allow read, write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:27:20.801Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:27:20.802Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:28:08.184Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:28:08.184Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/write their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles\r\n      allow read, write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:28:08.209Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:28:08.210Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:28:16.416Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:28:16.416Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/write their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles\r\n      allow read, write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:28:16.442Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:28:16.442Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:29:40.306Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:29:40.306Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:29:40.331Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:29:40.331Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:29:47.662Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:29:47.662Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:29:47.690Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:29:47.690Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:30:03.305Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:30:03.305Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:30:03.336Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:30:03.336Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:30:07.192Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:30:07.192Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:30:07.221Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:30:07.221Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:30:09.890Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:30:09.891Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:30:09.925Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:30:09.925Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:31:27.527Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:31:27.527Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // Temporary permissive rules for testing\r\n    match /{document=**} {\r\n      allow read, write: if request.auth != null;\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:31:27.554Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:31:27.554Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:31:37.506Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:31:37.507Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // Temporary permissive rules for testing\r\n    match /{document=**} {\r\n      allow read, write: if request.auth != null;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:31:37.514Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:31:37.514Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:31:44.103Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:31:44.103Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // Temporary permissive rules for testing\r\n    match /{document=**} {\r\n      allow read, write: if request.auth != null;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:31:44.110Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:31:44.110Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:34:13.411Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:34:13.411Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:34:13.443Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:34:13.443Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:34:20.444Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:34:20.444Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:34:20.471Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:34:20.471Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:37:40.386Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:37:40.386Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - users can read their own profile, admins can read/write all\r\n    match /user/{userId} {\r\n      // Allow users to create their own profile during signup (no permission checks needed)\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      // Allow users to read/update their own profile\r\n      allow read, update: if request.auth != null && request.auth.uid == userId;\r\n      // Admins can read/write all user profiles (but only if their profile exists)\r\n      allow read, write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.USER_ORG_ROLE in ['President', 'Vice President', 'Program Manager', 'Dean', 'Data & Systems Officer'];\r\n    }\r\n    \r\n    // Allow reading the user collection to check for existing users during signup\r\n    match /user/{userId} {\r\n      allow read: if request.auth != null;\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:37:40.415Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:37:40.415Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:37:49.413Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:37:49.413Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - simplified rules for debugging\r\n    match /user/{userId} {\r\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\r\n      allow read, write: if request.auth != null;\r\n    }\r\n    \r\n    // SERVES collection - user committee memberships\r\n    match /serves/{serveId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // COMMITTEE collection - authenticated users can read, authorized users can write\r\n    match /committee/{committeeId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.manage_committees == true;\r\n    }\r\n    \r\n    // FUNDING collection - funding requests\r\n    match /funding/{fundingId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_funds == true;\r\n    }\r\n    \r\n    // VOLUNTEER collection - volunteer opportunities\r\n    match /volunteer/{volunteerId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_volunteering == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_volunteering == true;\r\n    }\r\n    \r\n    // VOLUNTEERED collection - user volunteer participation\r\n    match /volunteered/{volunteeredId} {\r\n      allow read: if request.auth != null;\r\n      allow write: if request.auth != null;\r\n    }\r\n    \r\n    // ATTENDED collection - user attendance records\r\n    match /attended/{attendedId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n    \r\n    // ATTENDANCE collection - attendance events\r\n    match /attendance/{attendanceId} {\r\n      allow read: if request.auth != null;\r\n      allow create: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.create_attendance == true;\r\n      allow update: if request.auth != null && \r\n        exists(/databases/$(database)/documents/user/$(request.auth.uid)) &&\r\n        get(/databases/$(database)/documents/user/$(request.auth.uid)).data.permissions.approve_attendance == true;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:37:49.435Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:37:49.435Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:38:03.086Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:38:03.086Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - simplified rules for debugging\r\n    match /user/{userId} {\r\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\r\n      allow read, write: if request.auth != null;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:38:03.092Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:38:03.092Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-10-02T11:38:12.490Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules [none]
[debug] [2025-10-02T11:38:12.490Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // USER collection - simplified rules for debugging\r\n    match /user/{userId} {\r\n      // Allow authenticated users to read/write user profiles (temporary for debugging)\r\n      allow read, write: if request.auth != null;\r\n    }\r\n  }\r\n}\r\n"}]}}
[debug] [2025-10-02T11:38:12.496Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules 200
[debug] [2025-10-02T11:38:12.496Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/demo-no-project:securityRules {}
[info] +  firestore: Rules updated. 
